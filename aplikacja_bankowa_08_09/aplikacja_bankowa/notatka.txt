klasa abstrakcyjna

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace aplikacja_bankowa
{
    //klasa abstrakcyjna, nie można tworzyć elementów jej klasy, można po niej dziedziczyć
    abstract class Account
    {
        public int Id { get; } //jeśli seta nie będzie to zmienna będzie tylko do odczytu
        public string AccountNumber { get; }
        public decimal Balance { get; set; }
        public string FirstName { get; }
        public string LastName { get; }
        public long Pesel { get; }

        public Account(int id, decimal balance, string firstName, string lastName, long pesel)
        {
            Id = id;    
            AccountNumber = generateAccountNumber(id);
            Balance = balance;
            FirstName = firstName;
            LastName = lastName;
            Pesel = pesel;
        }
         
        public string GetFullName()
        {
            string fullName = string.Format("{0} {1}", FirstName, LastName);
            return fullName;
        }
        //polimorfizm tu będzie w TypeName(), definicje konkretne są w klasach które dziedziczą po klasie Account
        public abstract string TypeName();
        public abstract void Money(decimal value);
        private string generateAccountNumber(int id)
        {
            string number = string.Format("94{0:D10}", id);
            return number;
        }
        public void ChangeBalance(decimal value)
        {
            Balance += value;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace aplikacja_bankowa
{
    //ta klasa dziedziczy po klasie Account
    internal class SavingsAccount : Account
    {
        //konstruktor
        public SavingsAccount(int id, decimal balance, string firstName, string lastName, long pesel) 
            : base(id, balance, firstName, lastName, pesel) //i te dane z góry lecą do base i działają na podstawie tamtego konstruktora (no i działa tak jak powinien działać)
        {
        }

        public override string TypeName()
        {
            return "OSZCZĘDNOŚCIOWE";
        }
        public override void Money(decimal value)
        {
            Balance += Balance * value;
        }
        public void AddInterest(decimal interest)
        {
            Balance += Balance * interest;
        }

}
}



interfejs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace aplikacja_bankowa
{
    internal interface IPrinter
    {
        void Print(Account account);
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace aplikacja_bankowa
{
    //IPrinter to interfejs, jest on tutaj przypisany do klasy Printer
    internal class Printer : IPrinter
    {
        public void Print(Account account)
        {
            Console.WriteLine("Dane konta: ");
            Console.WriteLine("Numer konta: {0}", account.AccountNumber);
            Console.WriteLine("Rodzaj konta: {0}", account.TypeName());
            Console.WriteLine("Środki na koncie: {0} zł", account.Balance);
            Console.WriteLine("Imię i nazwisko właściciela: {0}", account.GetFullName());
            Console.WriteLine("PESEL właściciela: {0}", account.Pesel);
            Console.WriteLine("");
        }
    }
}

Linq przykłady


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace aplikacja_bankowa
{
    internal class AccountsManager
    {
        
        private IList<Account> _accounts;
        public AccountsManager()
        {
            _accounts = new List<Account>();
        }
        public IEnumerable<Account> GetAllAccounts()
        {
            return _accounts;
        }
        private int generateId()
        {
            int id = 1;
            if (_accounts.Any())
            {
                //a to tutaj ustalany alias nazwy obiektu, wskazujemy w nawiasie że chcemy dostać id tegoż obiektu które znaleźliśmy
                //no i następnie dodajemy 1 
                id = _accounts.Max(a => a.Id) + 1;
            }
            return id;
        }
        public SavingsAccount CreateSavingsAccount(string firstName, string lastName, long pesel)
        {
            int id = generateId();
            SavingsAccount account = new SavingsAccount(id, 0.0M, firstName, lastName, pesel);
            _accounts.Add(account);
            return account;
        }
        public BillingAccount CreateBillingAccount(string firstName, string lastName, long pesel)
        {
            int id = generateId();
            BillingAccount account = new BillingAccount(id, 0.0M, firstName, lastName, pesel);
            _accounts.Add(account);
            return account;
        }

        public IEnumerable<Account> GetAllAccountsFor(long pesel)
        {

            //ta biblioteka linq bazuje na SQL, dlatego tu mamy where na przykład
            return _accounts.Where(a => a.Pesel == pesel);
        }

        public Account GetAccountByNumber(string number)
        {
            return _accounts.Single(b => b.AccountNumber == number);
        }

        public IEnumerable<string> ListOfCustomers()
        {
            return _accounts.Select(a => string.Format("Imię: {0} | Nazwisko: {1} | PESEL: {2}", a.FirstName, a.LastName, a.Pesel)).Distinct();
        }

        public IEnumerable<Account> GetAllAccountsWithSpecifiedPesel(long peselInput)
        {
            IList<Account>  foundAccounts = new List<Account>();
            foreach (Account account in _accounts)
            {
                if (account.Pesel == peselInput)
                {
                    foundAccounts.Add(account);
                }
            }

            return foundAccounts;
        }
        public void CloseMonth()
        {

            foreach (SavingsAccount account in _accounts.Where(x => x is SavingsAccount))
            {
                account.AddInterest(0.04M);
            }
            foreach (BillingAccount account in _accounts.Where(x => x is BillingAccount))
            {
                account.TakeCharge(5.0M);
            }
        }
        public void AddMoney(string accountNo, decimal value)
        {
            Account account = GetAccountByNumber(accountNo);
            account.ChangeBalance(value);
        }
        public void TakeMoney(string accountNo, decimal value)
        {
            Account account = GetAccountByNumber(accountNo);
            account.ChangeBalance(-value);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace aplikacja_bankowa
{
    internal class BankManager
    {

        private AccountsManager _accountsManager;
        private IPrinter _printer;
        
        public BankManager()
        {
            _accountsManager = new AccountsManager();
            _printer = new Printer();
        }

        private void PrintMainMenu()
        {
            Console.Clear();
            Console.WriteLine("Wybierz akcję:");
            Console.WriteLine("1 - Lista kont klienta");
            Console.WriteLine("2 - Dodaj konto rozliczeniowe");
            Console.WriteLine("3 - Dodaj konto oszczęnościowe");
            Console.WriteLine("4 - Wpłać pieniądze na konto");
            Console.WriteLine("5 - Wypłać pieniądze z konta");
            Console.WriteLine("6 - Lista klientów");
            Console.WriteLine("7 - Wszystkie konta");
            Console.WriteLine("8 - Zakończ miesiąc");
            Console.WriteLine("0 - Zakończ");
        }
        public void Run()
        {
            int action;
            do
            {
                PrintMainMenu();
                action = SelectedAction();
                switch(action)
                {
                    case 1:
                        Console.Clear();
                        Console.WriteLine("Wybrano listę kont użytkownika");
                        UserAccountsList();
                        Console.ReadKey();
                        break;
                    case 2:
                        Console.Clear();
                        Console.WriteLine("Wybrano otwarcie konta rozliczeniowego");
                        CreateBillingAccount();
                        Console.ReadKey();
                        break;
                    case 3:
                        Console.Clear();
                        Console.WriteLine("Wybrano otwarcie konta oszczędnościowego");
                        CreateSavingsAccount();
                        Console.ReadKey();
                        break;
                    case 4:
                        Console.Clear();
                        Console.WriteLine("Wybrano wpłatę pieniędzy na konto");
                        AddMoney();
                        Console.ReadKey();
                        break;
                    case 5:
                        Console.Clear();
                        Console.WriteLine("Wybrano wypłatę pieniędzy z konta");
                        TakeMoney();
                        Console.ReadKey();
                        break;
                    case 6:
                        Console.Clear();
                        Console.WriteLine("Wybrano listę wszystkich klientów");
                        DisplayCustomersList();
                        Console.ReadKey();
                        break;
                    case 7:
                        Console.Clear();
                        Console.WriteLine("Wybrano listę wszystkich kont");
                        DisplayAllAccounts();
                        Console.ReadKey();
                        break;
                    case 8:
                        Console.Clear();
                        Console.WriteLine("Wybrano zakończenie miesiąca");
                        CloseMonth();
                        Console.ReadKey();
                        break;
                }
            } while (action != 0);
        }
        private int SelectedAction()
        {
            Console.Write("Akcja: ");
            string action = Console.ReadLine();
            
            if (string.IsNullOrEmpty(action))
                return -1;

            return int.Parse(action);
        }

        //private IEnumerable<Account> UserAccountsList()
       void UserAccountsList()
        {
            Console.Write("PESEL: ");
            string pesel = Console.ReadLine();
            //long pesel = long.Parse(Console.ReadLine());
            foreach (Account account in _accountsManager.GetAllAccountsFor(long.Parse(pesel)))
            {
                _printer.Print(account);
            }
        }
        private CustomerData ReadCustomerData()
        {
            string firstName;
            string lastName;
            string pesel;
            Console.Write("Podaj dane klienta: ");
            Console.Write("Imię: ");
            firstName = Console.ReadLine();
            Console.Write("Nazwisko: ");
            lastName = Console.ReadLine();
            Console.Write("PESEL: ");
            pesel = Console.ReadLine();

            return new CustomerData(firstName, lastName, pesel);
        }
        private void CreateBillingAccount()
        {
            CustomerData data = ReadCustomerData();
            Account billing = _accountsManager.CreateBillingAccount(data.FirstName, data.LastName, data.Pesel);
            Console.WriteLine("Utworzono konto: ");
            _printer.Print(billing);
        }
        private void CreateSavingsAccount()
        {
            CustomerData data = ReadCustomerData();
            Account savings = _accountsManager.CreateSavingsAccount(data.FirstName, data.LastName, data.Pesel);
            Console.WriteLine("Utworzono konto: ");
            _printer.Print(savings);
        }
        private AccountCustomerData ReadAccountCustomerData()
        {
            string accountNumber;
            string balance;

            Console.Write("Podaj dane klienta: ");
            Console.Write("Numer konta: ");
            accountNumber = Console.ReadLine();
            Console.Write("Wielkość wpłaty/wypłaty: ");      
            balance = Console.ReadLine();

            return new AccountCustomerData(accountNumber, balance);
        }
        private void AddMoney()
        {
            AccountCustomerData data = ReadAccountCustomerData(); 
            _accountsManager.AddMoney(data.AccountNumber, data.Balance);
            Account account = _accountsManager.GetAccountByNumber(data.AccountNumber);
            _printer.Print(account);
        }
        private void TakeMoney()
        {
            AccountCustomerData data = ReadAccountCustomerData();
            _accountsManager.TakeMoney(data.AccountNumber, data.Balance);
            Account account = _accountsManager.GetAccountByNumber(data.AccountNumber);
            _printer.Print(account);
        }
        private void DisplayCustomersList()
        {
            IEnumerable<string> list = _accountsManager.ListOfCustomers();
            foreach(string customer in list)
            {
                Console.WriteLine(customer);
            }
        }
        private void DisplayAllAccounts()
        {
            IEnumerable<Account> list = _accountsManager.GetAllAccounts();
            foreach (Account account in list)
            {
                _printer.Print(account);
            }
        }
        private void CloseMonth()
        {
            _accountsManager.CloseMonth();
            Console.WriteLine("Miesiąc zamknięty");
        }
    }
}

